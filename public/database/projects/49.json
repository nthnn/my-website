{
    "title": "Goblin3D",
    "link": "https://github.com/nthnn/goblin3d",
    "content": "<p>Goblin3D is a lightweight, dependency-free graphics engine designed for rendering 3D wireframes on monochromatic displays and TFT LCDs using the Arduino platform. Goblin3D is perfect for embedded systems where resources are limited but 3D rendering capabilities are desired.</p><br/><center><a href=\"/images/projects/project_49_01.gif\"><img src=\"/images/projects/project_49_01.gif\" class=\"col-12 col-lg-5\" /></a></center><br/><div class=\"alert bg-info text-white\"><b>Note:</b><br/>This library is also available on desktop environment.</div><br/><h3 class=\"shimmer\">Features</h3><hr/><ul><li><i>3D Wireframe Rendering</i> &mdash; Render basic 3D shapes as wireframes on displays.</li><li><i>Flexible Display Support</i> &mdash; Compatible with various display types, including OLEDs and TFT LCDs.</li><li><i>No External Dependencies</i> &mdash; Goblin3D is a standalone library that does not require any additional libraries, making it easy to integrate into any Arduino project.</li><li><i>Customizable Objects</i> &mdash; Easily define and manipulate custom 3D objects with your own vertices and edges.</li><li><i>Rotation and Scaling</i> &mdash; Support for rotating and scaling objects in 3D space.</li><li><i>Directly <kbd>*.obj</kbd> Rendering</i> &mdash; Goblin3D can render <kbd>*.obj</kbd> files made with Blender directly from SD card.</li></ul><br/><center><a href=\"/images/projects/project_49_02.png\"><img src=\"/images/projects/project_49_02.png\" class=\"col-12 col-lg-4\" /></a></center><br/><h3 class=\"shimmer\">Installation</h3><hr/><h5>Arduino Library Manager</h5><ol><li>Open the Arduino IDE.</li><li>Go to <kbd>Sketch > Include Library > Manage Libraries...</kbd></li><li>Search for <kbd>Goblin3D</kbd>.</li><li>Click <kbd>Install</kbd>.</li></ol><h5>Manual Installation</h5><ol><li>Download the latest release from the <a href=\"https://github.com/nthnn/goblin3d/releases\" target=\"_blank\">release</a> page.</li><li>Unzip the downloaded file.</li><li>Move the <kbd>Goblin3D</kbd> folder to your Arduino libraries directory (typically <kbd>~/Documents/Arduino/libraries/</kbd> on Windows and Linux, <kbd>~/Documents/Arduino/libraries/</kbd> on macOS).</li><li>Restart the Arduino IDE.</li></ol><br/><h3 class=\"shimmer\">Exporting from Blender</h3><hr/><p>Follow these steps to export a 3D scene from Blender in a format compatible with Goblin3D:</p><ol><li><b>Open the Export Menu</b><p>In Blender, navigate to the top menu bar and select <kbd>File > Export > Wavefront (.obj)</kbd>. This will allow you to export your 3D scene in the OBJ format, which Goblin3D can read and render as a wireframe.</p><center><a href=\"/images/projects/project_49_03.png\"><img src=\"/images/projects/project_49_03.png\" class=\"col-12 col-lg-5\" /></a></center><br/></li><li><b>Configure the Export Settings</b><p>Before saving the file, ensure that the <kbd>Vertex Groups</kbd> option is selected. This will export the vertex information needed for wireframe rendering.</p><p>Optionally, you can check the <kbd>Triangulate Faces</kbd> option to convert all faces into triangles, which is commonly used in wireframe rendering to ensure consistent results across different models.</p><center><a href=\"/images/projects/project_49_04.png\"><img src=\"/images/projects/project_49_04.png\" class=\"col-12 col-lg-4\" /></a></center><br/></li><li><b>Save the OBJ File</b><p>When saving, you do not need to include the Material File (*.mtl) since Goblin3D only renders the wireframe, and materials are not required for this purpose. Simply save the OBJ file, and it's ready for use with Goblin3D.</p></li></ol><br/><h3 class=\"shimmer\">Use Cases</h3><hr/><ol><li><b>Low-Power Displays</b><p>Goblin3D can be used for rendering 3D wireframe graphics on low-power, monochrome displays (e.g., OLEDs, TFTs) in embedded systems, which often lack the resources for full shading or texture mapping.</p></li><li><b>Wearable Devices</b><p>It can be integrated into wearable tech with small displays, such as smartwatches, where simple 3D visualizations like fitness progress or notifications might be shown in wireframe.</p></li><li><b>3D Modeling Previews</b><p>Designers can use Goblin3D to quickly preview 3D models in a wireframe format, providing a sense of object geometry before moving to a more detailed rendering process.</p></li><li><b>Retro 3D Games</b><p>Goblin3D can be used to develop retro-style 3D games on resource-constrained devices, where wireframe graphics give a nostalgic feel while minimizing resource usage.</p></li></ol>"
}