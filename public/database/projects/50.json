{
    "title": "Brainf*ck Assembly Language",
    "link": "https://github.com/nthnn/brainfuck-assembly",
    "content": "<p>Brainfuck Assembly (BFASM) is a human-readable assembly language designed to simplify the process of writing Brainfuck programs. Brainfuck, a minimalist esoteric language, uses only eight commands and is notoriously difficult to write and maintain due to its cryptic syntax. Brainfuck Assembly serves as an intermediate language, allowing developers to write more understandable code, which can then be translated into Brainfuck.</p><br/><h3 class=\"shimmer\">Features</h3><hr/><p>This example implements a simple echo program that reads input from the user and outputs it, effectively functioning as a basic &quot;cat&quot; command in Unix, which outputs its input to the standard output.</p><div class=\"overflow-auto w-auto\" style=\"border:solid var(--bs-gray);border-width:.1em .1em .1em .8em;padding:.2em .6em;\"><pre style=\"margin: 0; line-height: 125%\"><span class=\"text-danger\">in</span>          <span class=\"text-success\">; Get an initial input</span><br/><span class=\"text-danger\">jmp</span> begin   <span class=\"text-success\">; Begin the loop</span><br/>    out     <span class=\"text-success\">; Output the previous value</span><br/>    in      <span class=\"text-success\">; Get another input</span><br/><span class=\"text-danger\">jmp</span> end     <span class=\"text-success\">; End of loop</span><br/></div><br/><p>Simply transpile the <kbd>cat.bfasm</kbd> example program if the Brainfuck Assembly is already installed on the current system with the following command:</p><div class=\"overflow-auto w-auto\" style=\"border:solid var(--bs-gray);border-width:.1em .1em .1em .8em;padding:.2em .6em;\"><pre style=\"margin: 0; line-height: 125%\"><span class=\"text-danger\">bfasm</span> examples/cat.bfasm dist/cat.bf</div><br/><h3 class=\"shimmer\">Instructions</h3><hr/><ul><li><kbd>in</kbd> &mdash; This command reads one character from standard input and stores its ASCII value in the current memory cell. The <kbd>in</kbd> instruction has an equivalent Brainfuck instruction of <kbd>,</kbd>.</li><li><kbd>out</kbd> &mdash; This command prints the ASCII character stored in the current memory cell to standard output also has an equivalent Brainfuck instruction <kbd>.</kbd>.</li><li><kbd>mov ptr, &lt;addr&gt;</kbd> &mdash; Moves the memory pointer to the specified relative address. This instruction takes a parameter <kbd>addr</kbd> which is the relative address to move the pointer to. Positive values move the pointer to the right, and negative values move it to the left.</li><li><kbd>mov dat, &lt;val&gt;</kbd> &mdash; Sets the value of the current memory cell to the specified value. Also takes a parameter named <kbd>val</kbd> for value to set in the current memory cell. If the value is positive, it corresponds to a series of <kbd>+</kbd> commands; if negative, to a series of <kbd>-</kbd> commands.</li><li><kbd>inc dat</kbd> &mdash; Increments the value of the current memory cell by 1, which has an equivalent Brainfuck instruction of <kbd>+</kbd>.</li><li><kbd>dec dat</kbd> &mdash; Decrements the value of the current memory cell by 1, which has an equivalent Brainfuck instruction of <kbd>-</kbd>.</li><li><kbd>inc ptr</kbd> &mdash; Moves the memory pointer one cell to the right, similar to Brainfuck's <kbd>&gt;</kbd>.</li><li><kbd>dec ptr</kbd> &mdash; Moves the memory pointer one cell to the left, similar to Brainfuck's <kbd>&lt;</kbd>.</li><li><kbd>ld &lt;val&gt;</kbd> &mdash; Loads a value into the current memory cell by repeatedly incrementing it to reach the specified value. The parameter <kbd>val</kbd> is the value to load into the current memory cell.</li><li><kbd>jmp begin</kbd> &mdash; This command begins a loop. The loop will continue to execute until the current memory cell's value is zero.</li><li><kbd>jmp end</kbd> &mdash; Ends the loop that started with <kbd>jmp begin</kbd>.</li></ul>"
}